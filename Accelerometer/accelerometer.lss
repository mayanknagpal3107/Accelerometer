
accelerometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000003e8  0000047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000125  0080007a  0080007a  00000496  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000f2  00000000  00000000  000004b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000535  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000026f  00000000  00000000  00000add  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b5  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000203  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000140  00000000  00000000  00001627  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001767  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_13>
  38:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 39       	cpi	r26, 0x9F	; 159
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  8a:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_13>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	ef 93       	push	r30
  a4:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  a6:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
  a8:	2c b1       	in	r18, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  aa:	e0 91 9c 01 	lds	r30, 0x019C
  ae:	ef 5f       	subi	r30, 0xFF	; 255
    
    if ( tmphead == UART_RxTail ) {
  b0:	80 91 9d 01 	lds	r24, 0x019D
  b4:	e8 17       	cp	r30, r24
  b6:	11 f4       	brne	.+4      	; 0xbc <__vector_13+0x2a>
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	08 c0       	rjmp	.+16     	; 0xcc <__vector_13+0x3a>
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
  bc:	89 2f       	mov	r24, r25
  be:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  c0:	e0 93 9c 01 	sts	0x019C, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	e6 56       	subi	r30, 0x66	; 102
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
  cc:	80 93 9e 01 	sts	0x019E, r24
}
  d0:	ff 91       	pop	r31
  d2:	ef 91       	pop	r30
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_14>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
  f6:	90 91 9a 01 	lds	r25, 0x019A
  fa:	80 91 9b 01 	lds	r24, 0x019B
  fe:	98 17       	cp	r25, r24
 100:	61 f0       	breq	.+24     	; 0x11a <__vector_14+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 102:	e0 91 9b 01 	lds	r30, 0x019B
 106:	ef 5f       	subi	r30, 0xFF	; 255
 108:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 10a:	e0 93 9b 01 	sts	0x019B, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	e6 58       	subi	r30, 0x86	; 134
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	80 81       	ld	r24, Z
 116:	8c b9       	out	0x0c, r24	; 12
 118:	01 c0       	rjmp	.+2      	; 0x11c <__vector_14+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 11a:	55 98       	cbi	0x0a, 5	; 10
    }
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <clearBuffer>:


//Try to clear the already buffered data
void clearBuffer(){
	
	UART_RxHead = 0;
 12e:	10 92 9c 01 	sts	0x019C, r1
    UART_RxTail = 0;
 132:	10 92 9d 01 	sts	0x019D, r1
}
 136:	08 95       	ret

00000138 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 138:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
 13a:	10 92 9a 01 	sts	0x019A, r1
    UART_TxTail = 0;
 13e:	10 92 9b 01 	sts	0x019B, r1
    UART_RxHead = 0;
 142:	10 92 9c 01 	sts	0x019C, r1
    UART_RxTail = 0;
 146:	10 92 9d 01 	sts	0x019D, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 14a:	97 ff       	sbrs	r25, 7
 14c:	03 c0       	rjmp	.+6      	; 0x154 <uart_init+0x1c>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	8b b9       	out	0x0b, r24	; 11
    	 baudrate &= ~0x8000;
 152:	3f 77       	andi	r19, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 154:	30 bd       	out	0x20, r19	; 32
    UBRRL = (unsigned char) baudrate;
 156:	29 b9       	out	0x09, r18	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 158:	88 e9       	ldi	r24, 0x98	; 152
 15a:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 15c:	86 e8       	ldi	r24, 0x86	; 134
 15e:	80 bd       	out	0x20, r24	; 32
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 160:	08 95       	ret

00000162 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 162:	90 91 9c 01 	lds	r25, 0x019C
 166:	80 91 9d 01 	lds	r24, 0x019D
 16a:	98 17       	cp	r25, r24
 16c:	19 f4       	brne	.+6      	; 0x174 <uart_getc+0x12>
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	31 e0       	ldi	r19, 0x01	; 1
 172:	11 c0       	rjmp	.+34     	; 0x196 <uart_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 174:	e0 91 9d 01 	lds	r30, 0x019D
 178:	ef 5f       	subi	r30, 0xFF	; 255
    UART_RxTail = tmptail; 
 17a:	e0 93 9d 01 	sts	0x019D, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	e6 56       	subi	r30, 0x66	; 102
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	30 81       	ld	r19, Z
    
    return (UART_LastRxError << 8) + data;
 186:	20 91 9e 01 	lds	r18, 0x019E
 18a:	92 2f       	mov	r25, r18
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	ac 01       	movw	r20, r24
 190:	43 0f       	add	r20, r19
 192:	51 1d       	adc	r21, r1
 194:	9a 01       	movw	r18, r20

}/* uart_getc */
 196:	c9 01       	movw	r24, r18
 198:	08 95       	ret

0000019a <transmitByte>:


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 19a:	5d 9b       	sbis	0x0b, 5	; 11
 19c:	fe cf       	rjmp	.-4      	; 0x19a <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 19e:	8c b9       	out	0x0c, r24	; 12
}
 1a0:	08 95       	ret

000001a2 <uart_putc>:
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 1a2:	5d 9b       	sbis	0x0b, 5	; 11
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <uart_putc>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 1a6:	8c b9       	out	0x0c, r24	; 12
    /* enable UDRE interrupt */
    /*UART0_CONTROL    |= _BV(UART0_UDRIE);*/
	
	transmitByte(data);

}/* uart_putc */
 1a8:	08 95       	ret

000001aa <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 1aa:	fc 01       	movw	r30, r24
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <uart_puts+0xc>
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 1ae:	5d 9b       	sbis	0x0b, 5	; 11
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <uart_puts+0x4>
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
      uart_putc(*s++);
 1b2:	31 96       	adiw	r30, 0x01	; 1

void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 1b4:	8c b9       	out	0x0c, r24	; 12
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 1b6:	80 81       	ld	r24, Z
 1b8:	88 23       	and	r24, r24
 1ba:	c9 f7       	brne	.-14     	; 0x1ae <uart_puts+0x4>
      uart_putc(*s++);

}/* uart_puts */
 1bc:	08 95       	ret

000001be <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <uart_puts_p+0x8>
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 1c0:	5d 9b       	sbis	0x0b, 5	; 11
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <uart_puts_p+0x2>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 1c4:	2c b9       	out	0x0c, r18	; 12
 1c6:	fc 01       	movw	r30, r24
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	24 91       	lpm	r18, Z+
 1cc:	22 23       	and	r18, r18
 1ce:	c1 f7       	brne	.-16     	; 0x1c0 <uart_puts_p+0x2>
      uart_putc(c);

}/* uart_puts_p */
 1d0:	08 95       	ret

000001d2 <forward>:
#include "uart.h"
#include "uart.c"
#include <avr/interrupt.h>
void forward()
{
		sbi(PORTD,4);
 1d2:	94 9a       	sbi	0x12, 4	; 18
		sbi(PORTD,5);		
 1d4:	95 9a       	sbi	0x12, 5	; 18
		sbi(PORTD,2);
 1d6:	92 9a       	sbi	0x12, 2	; 18
		cbi(PORTD,3);
 1d8:	93 98       	cbi	0x12, 3	; 18
		sbi(PORTD,7);
 1da:	97 9a       	sbi	0x12, 7	; 18
		cbi(PORTD,6);		
 1dc:	96 98       	cbi	0x12, 6	; 18
}
 1de:	08 95       	ret

000001e0 <reverse>:

void reverse()
{		sbi(PORTD,4);
 1e0:	94 9a       	sbi	0x12, 4	; 18
		sbi(PORTD,5);		
 1e2:	95 9a       	sbi	0x12, 5	; 18
		cbi(PORTD,2);
 1e4:	92 98       	cbi	0x12, 2	; 18
		sbi(PORTD,3);
 1e6:	93 9a       	sbi	0x12, 3	; 18
		cbi(PORTD,7);
 1e8:	97 98       	cbi	0x12, 7	; 18
		sbi(PORTD,6);		
 1ea:	96 9a       	sbi	0x12, 6	; 18
}
 1ec:	08 95       	ret

000001ee <left>:

void left()
{		sbi(PORTD,4);
 1ee:	94 9a       	sbi	0x12, 4	; 18
		sbi(PORTD,5);		
 1f0:	95 9a       	sbi	0x12, 5	; 18
		cbi(PORTD,2);
 1f2:	92 98       	cbi	0x12, 2	; 18
		sbi(PORTD,3);
 1f4:	93 9a       	sbi	0x12, 3	; 18
		sbi(PORTD,7);
 1f6:	97 9a       	sbi	0x12, 7	; 18
		cbi(PORTD,6);		
 1f8:	96 98       	cbi	0x12, 6	; 18
}
 1fa:	08 95       	ret

000001fc <right>:
void right()
{		sbi(PORTD,4);
 1fc:	94 9a       	sbi	0x12, 4	; 18
		sbi(PORTD,5);		
 1fe:	95 9a       	sbi	0x12, 5	; 18
		sbi(PORTD,2);
 200:	92 9a       	sbi	0x12, 2	; 18
		cbi(PORTD,3);
 202:	93 98       	cbi	0x12, 3	; 18
		cbi(PORTD,7);
 204:	97 98       	cbi	0x12, 7	; 18
		sbi(PORTD,6);
 206:	96 9a       	sbi	0x12, 6	; 18
}
 208:	08 95       	ret

0000020a <stop>:
void stop()
{	cbi(PORTD,4);
 20a:	94 98       	cbi	0x12, 4	; 18
	cbi(PORTD,5);
 20c:	95 98       	cbi	0x12, 5	; 18
	cbi(PORTD,2);
 20e:	92 98       	cbi	0x12, 2	; 18
	cbi(PORTD,3);
 210:	93 98       	cbi	0x12, 3	; 18
	cbi(PORTD,7);
 212:	97 98       	cbi	0x12, 7	; 18
	cbi(PORTD,6);	
 214:	96 98       	cbi	0x12, 6	; 18
}
 216:	08 95       	ret

00000218 <motorinit>:

motorinit()
{

	sbi(DDRD,2);
 218:	8a 9a       	sbi	0x11, 2	; 17
	sbi(DDRD,3);
 21a:	8b 9a       	sbi	0x11, 3	; 17
	
	sbi(DDRD,4);
 21c:	8c 9a       	sbi	0x11, 4	; 17
	sbi(DDRD,5);
 21e:	8d 9a       	sbi	0x11, 5	; 17
	
	sbi(DDRD,6);
 220:	8e 9a       	sbi	0x11, 6	; 17
	sbi(DDRD,7);
 222:	8f 9a       	sbi	0x11, 7	; 17


}
 224:	08 95       	ret

00000226 <readADC>:
int readADC(int channel){
	
	unsigned int w;
	long val=0;
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADIF); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
 226:	96 b1       	in	r25, 0x06	; 6
 228:	97 61       	ori	r25, 0x17	; 23
 22a:	96 b9       	out	0x06, r25	; 6

	ADMUX = channel;
 22c:	87 b9       	out	0x07, r24	; 7
	
	ADMUX |= (1 << REFS0); // Set ADC reference to AVCC
 22e:	3e 9a       	sbi	0x07, 6	; 7
	//ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading

	
	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running 4
	ADCSRA |= (1 << ADEN);  // Enable ADC
 230:	37 9a       	sbi	0x06, 7	; 6
	
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions 
 232:	36 9a       	sbi	0x06, 6	; 6
	
	
	 //Wait for conversion to complete
   while(!(ADCSRA & (1<<ADIF)));
 234:	34 9b       	sbis	0x06, 4	; 6
 236:	fe cf       	rjmp	.-4      	; 0x234 <readADC+0xe>

   //Clear ADIF by writing one to it
   ADCSRA|=(1<<ADIF);	
 238:	34 9a       	sbi	0x06, 4	; 6
   
   w=ADCL;
 23a:	24 b1       	in	r18, 0x04	; 4
 23c:	30 e0       	ldi	r19, 0x00	; 0
   w|=(ADCH<<8);
 23e:	45 b1       	in	r20, 0x05	; 5
 240:	94 2f       	mov	r25, r20
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	28 2b       	or	r18, r24
 246:	39 2b       	or	r19, r25
   return w;
   
   
	
	
}
 248:	c9 01       	movw	r24, r18
 24a:	08 95       	ret

0000024c <main>:



void main()
{
 24c:	4f 92       	push	r4
 24e:	5f 92       	push	r5
 250:	6f 92       	push	r6
 252:	7f 92       	push	r7
 254:	8f 92       	push	r8
 256:	9f 92       	push	r9
 258:	af 92       	push	r10
 25a:	bf 92       	push	r11
 25c:	cf 92       	push	r12
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	df 93       	push	r29
 26a:	cf 93       	push	r28
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	6e 97       	sbiw	r28, 0x1e	; 30
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	f8 94       	cli
 276:	de bf       	out	0x3e, r29	; 62
 278:	0f be       	out	0x3f, r0	; 63
 27a:	cd bf       	out	0x3d, r28	; 61
   
DDRC=0x0f;
 27c:	8f e0       	ldi	r24, 0x0F	; 15
 27e:	84 bb       	out	0x14, r24	; 20
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
 280:	8f e5       	ldi	r24, 0x5F	; 95
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 9c 00 	call	0x138	; 0x138 <uart_init>
	sei();
 288:	78 94       	sei
	uart_puts("initialized");//uart_putc('f');
 28a:	80 e6       	ldi	r24, 0x60	; 96
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
	motorinit();
 292:	0e 94 0c 01 	call	0x218	; 0x218 <motorinit>
	sbi(DDRC,4);
 296:	a4 9a       	sbi	0x14, 4	; 20
	sbi(PORTC,4);
 298:	ac 9a       	sbi	0x15, 4	; 21
		
		x= readADC(5);
		y= readADC(6);
		z= readADC(7);
		
	itoa(x,str1,10);
 29a:	3e 01       	movw	r6, r28
 29c:	08 94       	sec
 29e:	61 1c       	adc	r6, r1
 2a0:	71 1c       	adc	r7, r1
		uart_puts("X=");
		uart_puts(str1);
		uart_puts("\t");
		
		itoa(y,str2,10);
 2a2:	2b e0       	ldi	r18, 0x0B	; 11
 2a4:	82 2e       	mov	r8, r18
 2a6:	91 2c       	mov	r9, r1
 2a8:	8c 0e       	add	r8, r28
 2aa:	9d 1e       	adc	r9, r29
		uart_puts("Y=");
		uart_puts(str2);
		uart_puts("\t");
		
		itoa(z,str3,10);
 2ac:	95 e1       	ldi	r25, 0x15	; 21
 2ae:	a9 2e       	mov	r10, r25
 2b0:	b1 2c       	mov	r11, r1
 2b2:	ac 0e       	add	r10, r28
 2b4:	bd 1e       	adc	r11, r29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2b6:	80 e7       	ldi	r24, 0x70	; 112
 2b8:	48 2e       	mov	r4, r24
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	58 2e       	mov	r5, r24
while(1)
	
	{

		
		x= readADC(5);
 2be:	85 e0       	ldi	r24, 0x05	; 5
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 13 01 	call	0x226	; 0x226 <readADC>
 2c6:	8c 01       	movw	r16, r24
		y= readADC(6);
 2c8:	86 e0       	ldi	r24, 0x06	; 6
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 13 01 	call	0x226	; 0x226 <readADC>
 2d0:	7c 01       	movw	r14, r24
		z= readADC(7);
 2d2:	87 e0       	ldi	r24, 0x07	; 7
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 13 01 	call	0x226	; 0x226 <readADC>
 2da:	6c 01       	movw	r12, r24
		
	itoa(x,str1,10);
 2dc:	c8 01       	movw	r24, r16
 2de:	b3 01       	movw	r22, r6
 2e0:	4a e0       	ldi	r20, 0x0A	; 10
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	0e 94 ad 01 	call	0x35a	; 0x35a <itoa>
		uart_puts("X=");
 2e8:	8c e6       	ldi	r24, 0x6C	; 108
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		uart_puts(str1);
 2f0:	c3 01       	movw	r24, r6
 2f2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		uart_puts("\t");
 2f6:	8f e6       	ldi	r24, 0x6F	; 111
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		
		itoa(y,str2,10);
 2fe:	c7 01       	movw	r24, r14
 300:	b4 01       	movw	r22, r8
 302:	4a e0       	ldi	r20, 0x0A	; 10
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	0e 94 ad 01 	call	0x35a	; 0x35a <itoa>
		uart_puts("Y=");
 30a:	81 e7       	ldi	r24, 0x71	; 113
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		uart_puts(str2);
 312:	c4 01       	movw	r24, r8
 314:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		uart_puts("\t");
 318:	8f e6       	ldi	r24, 0x6F	; 111
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		
		itoa(z,str3,10);
 320:	c6 01       	movw	r24, r12
 322:	b5 01       	movw	r22, r10
 324:	4a e0       	ldi	r20, 0x0A	; 10
 326:	50 e0       	ldi	r21, 0x00	; 0
 328:	0e 94 ad 01 	call	0x35a	; 0x35a <itoa>
		uart_puts("z=");
 32c:	84 e7       	ldi	r24, 0x74	; 116
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		uart_puts(str3);	
 334:	c5 01       	movw	r24, r10
 336:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		
		
		uart_puts("\n\r");
 33a:	87 e7       	ldi	r24, 0x77	; 119
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
		uart_puts("\n\r");
 342:	87 e7       	ldi	r24, 0x77	; 119
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
 34a:	80 ea       	ldi	r24, 0xA0	; 160
 34c:	9f e0       	ldi	r25, 0x0F	; 15
 34e:	f2 01       	movw	r30, r4
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <main+0x104>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 354:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 356:	d9 f7       	brne	.-10     	; 0x34e <main+0x102>
 358:	b2 cf       	rjmp	.-156    	; 0x2be <main+0x72>

0000035a <itoa>:
 35a:	fb 01       	movw	r30, r22
 35c:	9f 01       	movw	r18, r30
 35e:	e8 94       	clt
 360:	42 30       	cpi	r20, 0x02	; 2
 362:	c4 f0       	brlt	.+48     	; 0x394 <itoa+0x3a>
 364:	45 32       	cpi	r20, 0x25	; 37
 366:	b4 f4       	brge	.+44     	; 0x394 <itoa+0x3a>
 368:	4a 30       	cpi	r20, 0x0A	; 10
 36a:	29 f4       	brne	.+10     	; 0x376 <itoa+0x1c>
 36c:	97 fb       	bst	r25, 7
 36e:	1e f4       	brtc	.+6      	; 0x376 <itoa+0x1c>
 370:	90 95       	com	r25
 372:	81 95       	neg	r24
 374:	9f 4f       	sbci	r25, 0xFF	; 255
 376:	64 2f       	mov	r22, r20
 378:	77 27       	eor	r23, r23
 37a:	0e 94 de 01 	call	0x3bc	; 0x3bc <__udivmodhi4>
 37e:	80 5d       	subi	r24, 0xD0	; 208
 380:	8a 33       	cpi	r24, 0x3A	; 58
 382:	0c f0       	brlt	.+2      	; 0x386 <itoa+0x2c>
 384:	89 5d       	subi	r24, 0xD9	; 217
 386:	81 93       	st	Z+, r24
 388:	cb 01       	movw	r24, r22
 38a:	00 97       	sbiw	r24, 0x00	; 0
 38c:	a1 f7       	brne	.-24     	; 0x376 <itoa+0x1c>
 38e:	16 f4       	brtc	.+4      	; 0x394 <itoa+0x3a>
 390:	5d e2       	ldi	r21, 0x2D	; 45
 392:	51 93       	st	Z+, r21
 394:	10 82       	st	Z, r1
 396:	c9 01       	movw	r24, r18
 398:	0c 94 ce 01 	jmp	0x39c	; 0x39c <strrev>

0000039c <strrev>:
 39c:	dc 01       	movw	r26, r24
 39e:	fc 01       	movw	r30, r24
 3a0:	67 2f       	mov	r22, r23
 3a2:	71 91       	ld	r23, Z+
 3a4:	77 23       	and	r23, r23
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <strrev+0x4>
 3a8:	32 97       	sbiw	r30, 0x02	; 2
 3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <strrev+0x18>
 3ac:	7c 91       	ld	r23, X
 3ae:	6d 93       	st	X+, r22
 3b0:	70 83       	st	Z, r23
 3b2:	62 91       	ld	r22, -Z
 3b4:	ae 17       	cp	r26, r30
 3b6:	bf 07       	cpc	r27, r31
 3b8:	c8 f3       	brcs	.-14     	; 0x3ac <strrev+0x10>
 3ba:	08 95       	ret

000003bc <__udivmodhi4>:
 3bc:	aa 1b       	sub	r26, r26
 3be:	bb 1b       	sub	r27, r27
 3c0:	51 e1       	ldi	r21, 0x11	; 17
 3c2:	07 c0       	rjmp	.+14     	; 0x3d2 <__udivmodhi4_ep>

000003c4 <__udivmodhi4_loop>:
 3c4:	aa 1f       	adc	r26, r26
 3c6:	bb 1f       	adc	r27, r27
 3c8:	a6 17       	cp	r26, r22
 3ca:	b7 07       	cpc	r27, r23
 3cc:	10 f0       	brcs	.+4      	; 0x3d2 <__udivmodhi4_ep>
 3ce:	a6 1b       	sub	r26, r22
 3d0:	b7 0b       	sbc	r27, r23

000003d2 <__udivmodhi4_ep>:
 3d2:	88 1f       	adc	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	5a 95       	dec	r21
 3d8:	a9 f7       	brne	.-22     	; 0x3c4 <__udivmodhi4_loop>
 3da:	80 95       	com	r24
 3dc:	90 95       	com	r25
 3de:	bc 01       	movw	r22, r24
 3e0:	cd 01       	movw	r24, r26
 3e2:	08 95       	ret

000003e4 <_exit>:
 3e4:	f8 94       	cli

000003e6 <__stop_program>:
 3e6:	ff cf       	rjmp	.-2      	; 0x3e6 <__stop_program>
